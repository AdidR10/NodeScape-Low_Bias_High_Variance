name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, dev ]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - '.github/workflows/**'

env:
  FRONTEND_DOCKER_IMAGE: nodescape-frontend
  BACKEND_DOCKER_IMAGE: nodescape-backend

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Detect changes
      id: changes
      run: |
        # Check for frontend changes
        if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "^frontend/"; then
          echo "frontend=true" >> $GITHUB_OUTPUT
        else
          echo "frontend=false" >> $GITHUB_OUTPUT
        fi
        
        # Check for backend changes
        if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q "^backend/"; then
          echo "backend=true" >> $GITHUB_OUTPUT
        else
          echo "backend=false" >> $GITHUB_OUTPUT
        fi
        
        echo "Frontend changes detected: ${{ steps.changes.outputs.frontend }}"
        echo "Backend changes detected: ${{ steps.changes.outputs.backend }}"

  frontend-test:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: Run frontend tests
      working-directory: ./frontend
      run: npm test -- --watchAll=false --passWithNoTests
      
    - name: Build frontend application
      working-directory: ./frontend
      run: npm run build

  backend-test:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: needs.detect-changes.outputs.backend-changed == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt
        
    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run backend tests
      working-directory: ./backend
      run: |
        python -c "import tensorflow as tf; print('TensorFlow version:', tf.__version__)"
        python -c "import flask; print('Flask version:', flask.__version__)"
        python -c "from model import load_trained_model; print('Model loading test passed')"

  frontend-build-and-push:
    needs: [detect-changes, frontend-test]
    runs-on: ubuntu-latest
    if: |
      (needs.detect-changes.outputs.frontend-changed == 'true') &&
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate version tags
      id: version
      run: |
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        RUN_NUMBER=${{ github.run_number }}
        
        if [[ "$BRANCH_NAME" == "main" ]]; then
          VERSION="1.0.$RUN_NUMBER"
          LATEST_TAG="latest"
        elif [[ "$BRANCH_NAME" == "dev" ]]; then
          VERSION="0.1.$RUN_NUMBER"
          LATEST_TAG="dev"
        else
          VERSION="0.0.$RUN_NUMBER"
          LATEST_TAG="dev"
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT
        echo "run_number=$RUN_NUMBER" >> $GITHUB_OUTPUT
        
        echo "Generated version: $VERSION"
        echo "Branch: $BRANCH_NAME"
        echo "Run number: $RUN_NUMBER"
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and push frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.FRONTEND_DOCKER_IMAGE }}:${{ steps.version.outputs.version }}
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.FRONTEND_DOCKER_IMAGE }}:${{ steps.version.outputs.latest_tag }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  backend-build-and-push:
    needs: [detect-changes, backend-test]
    runs-on: ubuntu-latest
    if: |
      (needs.detect-changes.outputs.backend-changed == 'true') &&
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate version tags
      id: version
      run: |
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        RUN_NUMBER=${{ github.run_number }}
        
        if [[ "$BRANCH_NAME" == "main" ]]; then
          VERSION="1.0.$RUN_NUMBER"
          LATEST_TAG="latest"
        elif [[ "$BRANCH_NAME" == "dev" ]]; then
          VERSION="0.1.$RUN_NUMBER"
          LATEST_TAG="dev"
        else
          VERSION="0.0.$RUN_NUMBER"
          LATEST_TAG="dev"
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT
        echo "run_number=$RUN_NUMBER" >> $GITHUB_OUTPUT
        
        echo "Generated version: $VERSION"
        echo "Branch: $BRANCH_NAME"
        echo "Run number: $RUN_NUMBER"
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and push backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.BACKEND_DOCKER_IMAGE }}:${{ steps.version.outputs.version }}
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.BACKEND_DOCKER_IMAGE }}:${{ steps.version.outputs.latest_tag }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  docker-compose-test:
    needs: [detect-changes, frontend-test, backend-test]
    runs-on: ubuntu-latest
    if: |
      (needs.detect-changes.outputs.frontend-changed == 'true' || needs.detect-changes.outputs.backend-changed == 'true') &&
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Test Docker Compose
      run: |
        echo "Testing Docker Compose configurations..."
        
        # Test frontend docker-compose
        if [ -f "frontend/docker-compose.yml" ]; then
          echo "Testing frontend docker-compose.yml..."
          docker-compose -f frontend/docker-compose.yml config
        fi
        
        # Test backend docker-compose
        if [ -f "backend/docker-compose.yml" ]; then
          echo "Testing backend docker-compose.yml..."
          docker-compose -f backend/docker-compose.yml config
        fi
        
        echo "Docker Compose validation completed successfully!"

  security-scan:
    needs: [detect-changes, frontend-build-and-push, backend-build-and-push]
    runs-on: ubuntu-latest
    if: |
      (needs.detect-changes.outputs.frontend-changed == 'true' || needs.detect-changes.outputs.backend-changed == 'true') &&
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif' 